import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

label cycle(2 * 360 * units.deg)
public node vemsign {
    input wires;
    input timing_curve;
    input rev_limit: 6500 * units.rpm;
	input limiter_duration: 0.1;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 4.0) * cycle)
            .connect_wire(wires.wire3, (1.0 / 4.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 4.0) * cycle)
            .connect_wire(wires.wire2, (3.0 / 4.0) * cycle);
}

public node ea827_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 216 * units.deg, // 254
            gamma: 1.0,
            lift: 11.2 * units.mm,
            steps: 100
        );
}

public node ap_camshaft_builder {
    input lobe_profile: ea827_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 109.3 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam: _intake_cam;
    output exhaust_cam: _exhaust_cam;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 4.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe((rot360 - exhaust_lobe_center) + 3 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 1 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 2 * rot)

    _intake_cam
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot)
}

public node vw_ea827 {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "VW EA-827",
        starter_torque: 200 * units.lb_ft,
		starter_speed: 800 * units.rpm,
        redline: 6500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.0,
            max_burning_efficiency: 0.85)
    )

    crankshaft c0(
        throw: 0.5 * 86.4 * units.mm,
        flywheel_mass: 20 * units.lb,
        mass: 30 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.9,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 2
    )

    rod_journal rj0(angle: 20 * units.deg)
	rod_journal rj1(angle: 200 * units.deg)
	rod_journal rj2(angle: 200 * units.deg)
	rod_journal rj3(angle: 20 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: 280 * units.g,
        blowby: 0,
        compression_height: 32.5 * units.mm,
        wrist_pin_position: 0 * units.mm,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 400.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 144.0 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 81.0 * units.mm,
        deck_height: 220 * units.mm
    )

    intake intake(
        plenum_volume: 1.8 * units.L,
        plenum_cross_section_area: 10.0 * units.cm2,
        intake_flow_rate: k_carb(200.0),
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.992
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(615.0),
        primary_tube_length: 44.0 * units.inch,
        primary_flow_rate: k_carb(154.0),
        velocity_decay: 0.5, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system exhaust0(es_params, length: 3000 * units.mm, audio_volume: 1.2, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 20 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
			sound_attenuation: 0.25,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
			sound_attenuation: 0.5,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
			sound_attenuation: 0.75,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    ap_camshaft_builder camshaft()

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 45 * units.cc,
            intake_camshaft: camshaft.intake_cam,
            exhaust_camshaft: camshaft.exhaust_cam
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
        .add_sample(1000 * units.rpm, 15 * units.deg)
        .add_sample(2000 * units.rpm, 20 * units.deg)
        .add_sample(3000 * units.rpm, 25 * units.deg)
        .add_sample(4000 * units.rpm, 26 * units.deg)
        .add_sample(5000 * units.rpm, 30 * units.deg)
        .add_sample(6000 * units.rpm, 27 * units.deg)
		.add_sample(7000 * units.rpm, 23 * units.deg)

    engine.add_ignition_module(
        vemsign(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 6500 * units.rpm
        )
    )
}

public node car {
	alias output __out: vehicle;
	vehicle vehicle(
		mass: 945,
		drag_coefficient: 0.34,
		cross_sectional_area: (1.65 * units.m) * (1.41 * units.m) * 0.85,
		diff_ratio: 4.111,
		tire_radius: 28.76 * units.cm,
		rolling_resistance: 500
		)
}

public node car_transmission {
    alias output __out:
        transmission()
            .add_gear(3.455)
			.add_gear(1.944)
			.add_gear(1.286)
			.add_gear(0.969)
			.add_gear(0.8);
}
